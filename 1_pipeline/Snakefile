import pandas as pd
import os
import re


## this the folder where the results from cellranger are going to go


alignment_type = 'cellranger'
#alignment_type = 'kallisto'


if alignment_type == 'cellranger':
        print('Using cellranger')
	folder_out_alignment="/project/sims-lab/lmorrill/data/lightning/alignment/cellrangerOUT/"
elif alignment_type == 'kallisto':
        print('Using Kallisto')
        folder_out_alignment="/project/sims-lab/lmorrill/data/lightning/alignment/KallistoOUT/"
	print('The OUT folder is: ' + folder_out_alignment)
else:
        print('Specify <alignment_type>')

# ------------------------------------------------------------------------------------------------------------------------------------- #

def give_fastq_for_sample(sample_it):
        append_all = []
        subfolder=([flder + x for x in SAMPLES[SAMPLES['sample'] == sample_it]['cells'].iloc[0].split(',')])
        subfolder = [x.strip()+'/' for x in subfolder]
        for subfolder_it in subfolder:
                subfiles=([x for x in os.listdir(subfolder_it)])
                append_all.append([subfolder_it+x for x in subfiles if '_R1_001.fastq.gz' in x][0])
                append_all.append([subfolder_it+x for x in subfiles if '_R2_001.fastq.gz' in x][0])
        return(' '.join(append_all))

def give_fastq_for_cell(cell_it):
        append_all = []
        subfolder_it = flder + cell_it.strip() + '/' 
        subfiles=([x for x in os.listdir(subfolder_it)])
        append_all.append([subfolder_it+x for x in subfiles if '_R1_001.fastq.gz' in x][0])
        append_all.append([subfolder_it+x for x in subfiles if '_R2_001.fastq.gz' in x][0])
        return(append_all)

def flatten(l):
    return [item for sublist in l for item in sublist]

# ------------------------------------------------------------------------------------------------------------------------------------- #


SAMPLES = pd.read_csv("samples.csv", sep='\t')
print(SAMPLES)
# 0  G1_rep1  636200_14,654654_14,660727_14,660728_14,660729...
# 1  G1_rep2  636200_18,654654_18,660727_18,660728_18,660729...
# 2  G2_rep1  636200_15,654654_15,660727_15,660728_15,660729...


#DATETIME = "date +'%Y-%m-%dT%H:%M:%S'"

## example of one of the scripts that Charly ran
## /t1-data/project/cncb/shared/proj002/src/runCR2_proj2_2020_G1_rep1.sh
## LC=24
## LM=300
## change path to the output path for cellranger (output will be created only in the current folder)
#/home/l/lmorrill/t1data/cellranger/cellranger-7.1.0/bin/cellranger count --id=G1_rep1 --fastqs=/t1-data/project/cncb/shared/proj002/backup/CELLRANGER_OUT/ --sample=636200_14,654654_14,660727_14,660728_14,660729_14,660730_14,660731_14,660732_14 --transcriptome=/home/l/lmorrill/t1data/data/genomes/dmel649CORRECTED --chemistry=SC3Pv3 --localcores=$LC --localmem=$LM --force-cells=10000 --nosecondary

## fixed parameters
#transcriptome_version = 'dmel649CORRECTED'
#transcriptome_version = 'dmel649Chrimson'
transcriptome_version = 'dmel649ChrimsonV2'
transcriptome="/project/sims-lab/lmorrill/data/general/genomes/" + transcriptome_version
chemistry="SC3Pv3"
local_memory="100"
local_cores="24"


flder='/project/cncb/shared/proj002/backup/CELLRANGER_OUT/'
folder_out_alignment = folder_out_alignment + transcriptome_version + '/'
folder_out_QC = '/project/sims-lab/lmorrill/data/lightning/multiQC/'
folder_out_fastQC = '/project/sims-lab/lmorrill/data/lightning/fastQC/'
folder_out_fastQCScreen = '/project/sims-lab/lmorrill/data/lightning/fastQCScreen/'
#folder_water = '/project/cncb/imorgan/3_analysis/sanity_check/links_fastq_water_mem/' ## not used
folder_salt = '/project/cncb/imorgan/1_fastq/FASTQ/'

salt_on = True
if salt_on:
    flder=folder_salt
else:
    all_fastq = (flatten([x.split(',') for x in SAMPLES['cells']]))
    #all_fastq = all_fastq

    all_fastq_names = [give_fastq_for_cell(x)[1].replace(flder, '').replace('.fastq.gz', '') for x in all_fastq]
    #print(all_fastq_names)

    #print([flder+x+".fastq.gz" for x in all_fastq_names])

#all_fastq_water = os.listdir(folder_water)
#print(all_fastq_water)
all_fastq_salt = [x.replace('.fastq.gz', '') for x in os.listdir(folder_salt)]
print(all_fastq_salt)

rule all:
    input:
        #expand(folder_out_alignment+"{sample}/{sample}/outs/filtered_feature_bc_matrix/features.tsv.gz", sample=SAMPLES["sample"]) ## run cellranger
        #expand(folder_out_alignment+"{sample}/counts_unfiltered/cells_x_genes.mtx", sample=SAMPLES["sample"]) ## run kallisto
        #expand(folder_out_QC+"{name_out}/", name_out=all_fastq)
        #expand(folder_out_fastQC+"{fastq_file}/", fastq_file=all_fastq)
        #expand(folder_out_fastQCScreen+"{fastq_file}_screen.html", fastq_file=all_fastq_names)
        expand(folder_out_fastQCScreen+"{fastq_file}_screen.html", fastq_file=[x for x in all_fastq_salt if '_R2_' in x])


## The reference has been created as follow, and as specified in <~/projects/general/genomes_kallisto/about >
# kb ref ../genomes/dmel-all-chromosome-r6.49_Chrimson.fasta ../genomes/dmel-all-r6.49_CORRECTED_Chrimson.gtf -i dmel-all-r6.49_CORRECTED_Chrimson_KallistoINDEX -g dmel-all-r6.49_CORRECTED_Chrimson_KallistoT2G -f1 dmel-all-r6.49_CORRECTED_ChrimsonFASTA
## I assume that, if the chemistry if SC3Pv3, then the technology is 10XV3
rule kallisto_alignment:
    input:
        "../data/lightning/about_files/about-condition-{sample}.txt"
    log:
        "logs/kallisto_count_{sample}"
    params:
        cells= lambda wildcards: give_fastq_for_sample(wildcards.sample) #' '.join(["/project/cncb/shared/proj002/backup/CELLRANGER_OUT/" + x for x in SAMPLES[SAMPLES['sample'] == wildcards.sample]['cells'].iloc[0].split(',')])
    output:
       folder_out_alignment+"{sample}/counts_unfiltered/cells_x_genes.mtx"
    shell:
        'kb count ' + "{params.cells}  -o " + folder_out_alignment + "{wildcards.sample} -i ~/projects/general/genomes_kallisto/dmel-all-r6.49_CORRECTED_Chrimson_KallistoINDEX -g ~/projects/general/genomes_kallisto/dmel-all-r6.49_CORRECTED_Chrimson_KallistoT2G -x 10XV3"

rule cellranger_count:
    input:
        "../data/lightning/about_files/about-condition-{sample}.txt"
    log:
        "logs/cellranger_count_{sample}"
    params:
        cells= lambda wildcards: SAMPLES[SAMPLES['sample'] == wildcards.sample]['cells'].iloc[0]
    output:
       folder_out_alignment+"{sample}/{sample}/outs/filtered_feature_bc_matrix/features.tsv.gz"
    shell:
        ## note that any folder which has been created for the output should be deleted first, as otherwise cellranger throws an error
        "cd {folder_out_alignment}/{wildcards.sample}; " + "rm -r " + folder_out_alignment +"{wildcards.sample}/{wildcards.sample}; " + "/project/sims-lab/lmorrill/cellranger/cellranger-7.1.0/bin/cellranger count --id={wildcards.sample} --fastqs=/project/cncb/shared/proj002/backup/CELLRANGER_OUT/ --sample={params.cells} --transcriptome={transcriptome} --chemistry={chemistry} --force-cells=10000 --nosecondary"

#rule multiqc:
#   input:
#        flder+"{fastq_name}"
#    output:
#        folder_out_QC + "{fastq_name}/"        
#    shell:
#        'multiqc {input} --outdir ' + folder_out_QC 


rule fastqc:
    input:
        lambda wildcards: give_fastq_for_cell(wildcards.fastq_file)[1]
    output:
        folder_out_fastQC + "{fastq_file}/"
    shell:
        '/project/sims-lab/lmorrill/software/FastQC/./fastqc --outdir ' + folder_out_fastQC + ' -f {input}'

rule fastqscreen:
    input:
         flder+"{fastq_file}.fastq.gz"
    output:
         folder_out_fastQCScreen+"{fastq_file}"+"_screen.html"
    shell:
        ## 333----------- : repetitive regions found in several mammals, and possibly the other species. suspected polyG tails or repeats of some sort
        "module add bowtie2; /home/l/lmorrill/t1data/conda/rufus_env/envs/bioinformatics_software/bin/fastq_screen  --force --aligner 'bowtie2' --conf fastq_screen.conf {input} --filter 333------------ --tag --outdir " + folder_out_fastQCScreen
        ## 00000000000000: no hits
#        "module add bowtie2; /home/l/lmorrill/t1data/conda/rufus_env/envs/bioinformatics_software/bin/fastq_screen  --force --aligner 'bowtie2' --conf fastq_screen.conf {input} --filter 00000000000000 --tag --outdir " + folder_out_fastQCScreen ## no hits



